name: Deploy to Production

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20.x'

jobs:
  # ===================================
  # Deploy to Vercel
  # ===================================
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://kroiautocenter.fi

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event.inputs.environment || 'production' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: Create Sentry Release
        uses: getsentry/action-release@v1
        if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{ github.event.inputs.environment || 'production' }}
          version: ${{ github.sha }}
          sourcemaps: ./.next

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ… Deployed to Vercel: ${{ steps.deploy.outputs.deployment_url }}`
            })

  # ===================================
  # Deploy via Docker (Alternative)
  # ===================================
  deploy-docker:
    name: Deploy Docker Container
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/kroi-auto-center
            git pull origin main
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -af

  # ===================================
  # Health Check
  # ===================================
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy-vercel]
    if: always()

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check application health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://kroiautocenter.fi/api/health)
          if [ $response -eq 200 ]; then
            echo "Health check passed!"
          else
            echo "Health check failed with status code: $response"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          curl -f https://kroiautocenter.fi || exit 1
          curl -f https://kroiautocenter.fi/api/health || exit 1

  # ===================================
  # Rollback (Manual Trigger)
  # ===================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event.inputs.environment == 'production'
    needs: [health-check]

    steps:
      - name: Trigger rollback
        run: |
          echo "Deployment health check failed. Manual rollback required."
          echo "Run: vercel rollback <deployment-url> --token=<token>"

      - name: Notify team
        run: |
          echo "ALERT: Production deployment failed health check"
          echo "Immediate action required!"