version: '3.9'

services:
  # ===================================
  # PostgreSQL Database (Development)
  # ===================================
  postgres:
    image: postgres:16-alpine
    container_name: kroi-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-kroi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kroi_dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-kroi_auto_center}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kroi-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-kroi}']
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Redis Cache (Development)
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: kroi-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - kroi-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Main Application
  # ===================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: kroi-auto-center
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # Database
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-production}
      - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
      # Email
      - RESEND_API_KEY=${RESEND_API_KEY}
      - CONTACT_EMAIL=${CONTACT_EMAIL}
      # Auth
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kroi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.kroi.description=Kroi Auto Center Application"
      - "com.kroi.version=1.0.0"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ===================================
  # Nginx Reverse Proxy (Optional)
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: kroi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - kroi-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  kroi-network:
    driver: bridge
    name: kroi-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx-logs:
    driver: local