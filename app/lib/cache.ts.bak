/**
 * Caching Service
 * Redis-based caching for improved performance
 */

import Redis from 'ioredis';

class CacheService {
  private redis: Redis | null = null;
  private isConnected = false;

  constructor() {
    this.initRedis();
  }

  private initRedis() {
    try {
      if (process.env.REDIS_URL) {
        this.redis = new Redis(process.env.REDIS_URL, {
          retryDelayOnFailover: 100,
          maxRetriesPerRequest: 3,
          lazyConnect: true,
        });

        this.redis.on('connect', () => {
          this.isConnected = true;
          console.log('Redis connected successfully');
        });

        this.redis.on('error', (error) => {
          this.isConnected = false;
          console.error('Redis connection error:', error);
        });
      }
    } catch (error) {
      console.error('Redis initialization error:', error);
    }
  }

  async get<T>(key: string): Promise<T | null> {
    if (!this.redis || !this.isConnected) return null;

    try {
      const value = await this.redis.get(key);
      return value ? JSON.parse(value) : null;
    } catch (error) {
      console.error('Cache get error:', error);
      return null;
    }
  }

  async set(key: string, value: any, ttlSeconds: number = 300): Promise<void> {
    if (!this.redis || !this.isConnected) return;

    try {
      await this.redis.setex(key, ttlSeconds, JSON.stringify(value));
    } catch (error) {
      console.error('Cache set error:', error);
    }
  }

  async del(key: string): Promise<void> {
    if (!this.redis || !this.isConnected) return;

    try {
      await this.redis.del(key);
    } catch (error) {
      console.error('Cache delete error:', error);
    }
  }

  async invalidatePattern(pattern: string): Promise<void> {
    if (!this.redis || !this.isConnected) return;

    try {
      const keys = await this.redis.keys(pattern);
      if (keys.length > 0) {
        await this.redis.del(...keys);
      }
    } catch (error) {
      console.error('Cache invalidation error:', error);
    }
  }

  // Car-specific cache methods
  async getCars(filters: string): Promise<any | null> {
    return this.get(`cars:${filters}`);
  }

  async setCars(filters: string, data: any, ttl: number = 300): Promise<void> {
    await this.set(`cars:${filters}`, data, ttl);
  }

  async invalidateCarCache(): Promise<void> {
    await this.invalidatePattern('cars:*');
  }

  // Analytics cache methods
  async getAnalytics(key: string): Promise<any | null> {
    return this.get(`analytics:${key}`);
  }

  async setAnalytics(key: string, data: any, ttl: number = 900): Promise<void> {
    await this.set(`analytics:${key}`, data, ttl);
  }
}

export const cache = new CacheService();